{"ast":null,"code":"import Constantes from '../../utils/Constantes';\nimport axios from \"axios\";\nconst API_URL = Constantes.api_url; // const axiosInstance = axios.create({\n//     baseURL: `${API_URL}`,\n//     timeout: 5000,\n//     headers: {\n//         Authorization: localStorage.getItem('access_token')\n//             ? 'JWT ' + localStorage.getItem('access_token')\n//             : null,\n//         'Content-type': 'aplication/json',\n//         accept: 'application/json'\n//     }\n// })\n// export default axiosInstance\n\nexport async function registerUser(usuario) {\n  return await axios({\n    method: \"POST\",\n    url: `${API_URL}/usuario/register/`,\n    data: usuario\n  }).then(response => {\n    return response.data;\n  }).catch(function (error) {\n    if (error.reponse) {\n      return error.response;\n    }\n  });\n}\nexport async function login(usuario) {\n  return await axios({\n    method: \"POST\",\n    url: `${API_URL}/api/token/`,\n    data: usuario\n  }).then(res => {\n    localStorage.setItem('access_token', res.data.access);\n    localStorage.setItem('refresh_token', res.data.refresh);\n    return \"Acceso Concedido\";\n  }).catch(function (error) {\n    if (error.reponse) {\n      return \"Error en la credenciales\";\n    }\n  });\n}\nexport async function RefreshAccessToken() {\n  return await axios({\n    method: \"POST\",\n    url: `${API_URL}/api/token/`,\n    data: usuario\n  }).then(res => {\n    localStorage.setItem('access_token', res.data.access);\n    localStorage.setItem('refresh_token', res.data.refresh);\n    return \"Acceso Concedido\";\n  }).catch(function (error) {\n    if (error.reponse) {\n      return \"Error en la credenciales\";\n    }\n  });\n}\n_c = RefreshAccessToken;\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if (typeof error.response === 'undefined') {\n    alert('A server/network error occurred. ' + 'Looks like CORS might be the problem. ' + 'Sorry about this - we will get it fixed shortly.');\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + 'token/refresh/') {\n    window.location.href = '/login/';\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === 'token_not_valid' && error.response.status === 401 && error.response.statusText === 'Unauthorized') {\n    const refreshToken = localStorage.getItem('refresh_token');\n\n    if (refreshToken) {\n      const tokenParts = JSON.parse(atob(refreshToken.split('.')[1])); // exp date in token is expressed in seconds, while now() returns milliseconds:\n\n      const now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post('/token/refresh/', {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem('access_token', response.data.access);\n          localStorage.setItem('refresh_token', response.data.refresh);\n          axiosInstance.defaults.headers['Authorization'] = 'JWT ' + response.data.access;\n          originalRequest.headers['Authorization'] = 'JWT ' + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log('Refresh token is expired', tokenParts.exp, now);\n        window.location.href = '/register/';\n      }\n    } else {\n      console.log('Refresh token not available.');\n      window.location.href = '/register/';\n    }\n  }\n\n  return Promise.reject(error);\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"RefreshAccessToken\");","map":{"version":3,"sources":["C:/Users/W10AS31122021/Desktop/GATHER/gather_front/src/components/services/LoginService.jsx"],"names":["Constantes","axios","API_URL","api_url","registerUser","usuario","method","url","data","then","response","catch","error","reponse","login","res","localStorage","setItem","access","refresh","RefreshAccessToken","axiosInstance","interceptors","use","originalRequest","config","alert","Promise","reject","status","baseURL","window","location","href","code","statusText","refreshToken","getItem","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","console","log","exp","post","defaults","headers","err"],"mappings":"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","sourcesContent":["import Constantes from '../../utils/Constantes'\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = Constantes.api_url; \r\n\r\n// const axiosInstance = axios.create({\r\n//     baseURL: `${API_URL}`,\r\n//     timeout: 5000,\r\n//     headers: {\r\n//         Authorization: localStorage.getItem('access_token')\r\n//             ? 'JWT ' + localStorage.getItem('access_token')\r\n//             : null,\r\n//         'Content-type': 'aplication/json',\r\n//         accept: 'application/json'\r\n//     }\r\n// })\r\n\r\n// export default axiosInstance\r\n\r\n\r\nexport async function registerUser(usuario) {\r\n    return await axios({\r\n      method: \"POST\",\r\n      url: `${API_URL}/usuario/register/`,\r\n      data:usuario\r\n    })\r\n      .then((response) => {\r\n          return response.data})\r\n      .catch(function (error) {\r\n        if (error.reponse) {\r\n          return error.response;\r\n        }\r\n      });\r\n}\r\n\r\nexport async function login(usuario){\r\n    return await axios({\r\n        method: \"POST\",\r\n        url: `${API_URL}/api/token/`,\r\n        data:usuario\r\n      })\r\n        .then((res) => {\r\n            localStorage.setItem('access_token', res.data.access);\r\n\t\t\t      localStorage.setItem('refresh_token', res.data.refresh);\r\n            return \"Acceso Concedido\"})\r\n        .catch(function (error) {\r\n          if (error.reponse) {\r\n            return \"Error en la credenciales\";\r\n          }\r\n        });\r\n}\r\n\r\nexport async function RefreshAccessToken(){\r\n  return await axios({\r\n      method: \"POST\",\r\n      url: `${API_URL}/api/token/`,\r\n      data:usuario\r\n    })\r\n      .then((res) => {\r\n          localStorage.setItem('access_token', res.data.access);\r\n          localStorage.setItem('refresh_token', res.data.refresh);\r\n          return \"Acceso Concedido\"})\r\n      .catch(function (error) {\r\n        if (error.reponse) {\r\n          return \"Error en la credenciales\";\r\n        }\r\n      });\r\n}\r\n\r\n\r\naxiosInstance.interceptors.response.use(\r\n\t(response) => {\r\n\t\treturn response;\r\n\t},\r\n\tasync function (error) {\r\n\t\tconst originalRequest = error.config;\r\n\r\n\t\tif (typeof error.response === 'undefined') {\r\n\t\t\talert(\r\n\t\t\t\t'A server/network error occurred. ' +\r\n\t\t\t\t\t'Looks like CORS might be the problem. ' +\r\n\t\t\t\t\t'Sorry about this - we will get it fixed shortly.'\r\n\t\t\t);\r\n\t\t\treturn Promise.reject(error);\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\terror.response.status === 401 &&\r\n\t\t\toriginalRequest.url === baseURL + 'token/refresh/'\r\n\t\t) {\r\n\t\t\twindow.location.href = '/login/';\r\n\t\t\treturn Promise.reject(error);\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\terror.response.data.code === 'token_not_valid' &&\r\n\t\t\terror.response.status === 401 &&\r\n\t\t\terror.response.statusText === 'Unauthorized'\r\n\t\t) {\r\n\t\t\tconst refreshToken = localStorage.getItem('refresh_token');\r\n\r\n\t\t\tif (refreshToken) {\r\n\t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\r\n\r\n\t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\r\n\t\t\t\tconst now = Math.ceil(Date.now() / 1000);\r\n\t\t\t\tconsole.log(tokenParts.exp);\r\n\r\n\t\t\t\tif (tokenParts.exp > now) {\r\n\t\t\t\t\treturn axiosInstance\r\n\t\t\t\t\t\t.post('/token/refresh/', { refresh: refreshToken })\r\n\t\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\r\n\t\t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\r\n\r\n\t\t\t\t\t\t\taxiosInstance.defaults.headers['Authorization'] =\r\n\t\t\t\t\t\t\t\t'JWT ' + response.data.access;\r\n\t\t\t\t\t\t\toriginalRequest.headers['Authorization'] =\r\n\t\t\t\t\t\t\t\t'JWT ' + response.data.access;\r\n\r\n\t\t\t\t\t\t\treturn axiosInstance(originalRequest);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\r\n\t\t\t\t\twindow.location.href = '/register/';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Refresh token not available.');\r\n\t\t\t\twindow.location.href = '/register/';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n);\r\n"]},"metadata":{},"sourceType":"module"}
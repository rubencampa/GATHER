{"ast":null,"code":"function useDraggableScroll(ref, options) {\n  if (options === void 0) {\n    options = {\n      direction: 'both'\n    };\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    if (typeof ref !== 'object' || typeof ref.current === 'undefined') {\n      console.error('`useDraggableScroll` expects a single ref argument.');\n    }\n  }\n\n  var _options = options,\n      direction = _options.direction; // The initial position (scroll progress and mouse location) when the mouse is pressed down on the element\n\n  var initialPosition = {\n    scrollTop: 0,\n    scrollLeft: 0,\n    mouseX: 0,\n    mouseY: 0\n  };\n\n  var mouseMoveHandler = function mouseMoveHandler(event) {\n    if (ref.current) {\n      // Calculate differences to see how far the user has moved\n      var dx = event.clientX - initialPosition.mouseX;\n      var dy = event.clientY - initialPosition.mouseY; // Scroll the element according to those differences\n\n      if (direction !== 'horizontal') ref.current.scrollTop = initialPosition.scrollTop - dy;\n      if (direction !== 'vertical') ref.current.scrollLeft = initialPosition.scrollLeft - dx;\n    }\n  };\n\n  var mouseUpHandler = function mouseUpHandler() {\n    // Return to cursor: grab after the user is no longer pressing\n    if (ref.current) ref.current.style.cursor = 'grab'; // Remove the event listeners since it is not necessary to track the mouse position anymore\n\n    document.removeEventListener('mousemove', mouseMoveHandler);\n    document.removeEventListener('mouseup', mouseUpHandler);\n  };\n\n  var onMouseDown = function onMouseDown(event) {\n    if (ref.current) {\n      // Save the position at the moment the user presses down\n      initialPosition = {\n        scrollLeft: ref.current.scrollLeft,\n        scrollTop: ref.current.scrollTop,\n        mouseX: event.clientX,\n        mouseY: event.clientY\n      }; // Show a cursor: grabbing style and set user-select: none to avoid highlighting text while dragging\n\n      ref.current.style.cursor = 'grabbing';\n      ref.current.style.userSelect = 'none'; // Add the event listeners that will track the mouse position for the rest of the interaction\n\n      document.addEventListener('mousemove', mouseMoveHandler);\n      document.addEventListener('mouseup', mouseUpHandler);\n    }\n  };\n\n  return {\n    onMouseDown: onMouseDown\n  };\n}\n\nexport default useDraggableScroll;","map":{"version":3,"mappings":"SAEwBA,mBACtBC,KACAC;MAAAA;AAAAA,cAEI;AAAEC,eAAS,EAAE;AAAb,KAFJD;;;AAIA,MAAIE,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,aAA7B,EAA4C;AAC1C,QAAI,OAAOH,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAG,CAACM,OAAX,KAAuB,WAAtD,EAAmE;AACjEC,aAAO,CAACC,KAARD,CAAc,qDAAdA;AACD;AACF;;AAED,iBAAsBN,OAAtB;AAAA,MAAQC,SAAR,YAAQA,SAAR,CAVAD,CAUA;;AAGA,MAAIQ,eAAe,GAAG;AAAEC,aAAS,EAAE,CAAb;AAAgBC,cAAU,EAAE,CAA5B;AAA+BC,UAAM,EAAE,CAAvC;AAA0CC,UAAM,EAAE;AAAlD,GAAtB;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD;AACvB,QAAIf,GAAG,CAACM,OAAR,EAAiB;AACf;AACA,UAAMU,EAAE,GAAGD,KAAK,CAACE,OAANF,GAAgBN,eAAe,CAACG,MAA3C;AACA,UAAMM,EAAE,GAAGH,KAAK,CAACI,OAANJ,GAAgBN,eAAe,CAACI,MAA3C,CAHe;;AAMf,UAAIX,SAAS,KAAK,YAAlB,EACEF,GAAG,CAACM,OAAJN,CAAYU,SAAZV,GAAwBS,eAAe,CAACC,SAAhBD,GAA4BS,EAApDlB;AACF,UAAIE,SAAS,KAAK,UAAlB,EACEF,GAAG,CAACM,OAAJN,CAAYW,UAAZX,GAAyBS,eAAe,CAACE,UAAhBF,GAA6BO,EAAtDhB;AACH;AAXH;;AAcA,MAAMoB,cAAc,GAAG,SAAjBA,cAAiB;AACrB;AACA,QAAIpB,GAAG,CAACM,OAAR,EAAiBN,GAAG,CAACM,OAAJN,CAAYqB,KAAZrB,CAAkBsB,MAAlBtB,GAA2B,MAA3BA,CAFI,CAEJ;;AAGjBuB,YAAQ,CAACC,mBAATD,CAA6B,WAA7BA,EAA0CT,gBAA1CS;AACAA,YAAQ,CAACC,mBAATD,CAA6B,SAA7BA,EAAwCH,cAAxCG;AANF;;AASA,MAAME,WAAW,GAAG,SAAdA,WAAc,CAACV,KAAD;AAClB,QAAIf,GAAG,CAACM,OAAR,EAAiB;AACf;AACAG,qBAAe,GAAG;AAChBE,kBAAU,EAAEX,GAAG,CAACM,OAAJN,CAAYW,UADR;AAEhBD,iBAAS,EAAEV,GAAG,CAACM,OAAJN,CAAYU,SAFP;AAGhBE,cAAM,EAAEG,KAAK,CAACE,OAHE;AAIhBJ,cAAM,EAAEE,KAAK,CAACI;AAJE,OAAlBV,CAFe;;AAUfT,SAAG,CAACM,OAAJN,CAAYqB,KAAZrB,CAAkBsB,MAAlBtB,GAA2B,UAA3BA;AACAA,SAAG,CAACM,OAAJN,CAAYqB,KAAZrB,CAAkB0B,UAAlB1B,GAA+B,MAA/BA,CAXe;;AAcfuB,cAAQ,CAACI,gBAATJ,CAA0B,WAA1BA,EAAuCT,gBAAvCS;AACAA,cAAQ,CAACI,gBAATJ,CAA0B,SAA1BA,EAAqCH,cAArCG;AACD;AAjBH;;AAoBA,SAAO;AAAEE,eAAW,EAAXA;AAAF,GAAP;AACD","names":["useDraggableScroll","ref","options","direction","process","env","NODE_ENV","current","console","error","initialPosition","scrollTop","scrollLeft","mouseX","mouseY","mouseMoveHandler","event","dx","clientX","dy","clientY","mouseUpHandler","style","cursor","document","removeEventListener","onMouseDown","userSelect","addEventListener"],"sources":["C:\\Users\\W10AS31122021\\Desktop\\GATHER\\gather_front\\node_modules\\use-draggable-scroll\\src\\index.tsx"],"sourcesContent":["import { RefObject } from 'react';\n\nexport default function useDraggableScroll(\n  ref: RefObject<HTMLElement>,\n  options: {\n    direction?: 'vertical' | 'horizontal' | 'both';\n  } = { direction: 'both' }\n) {\n  if (process.env.NODE_ENV === 'development') {\n    if (typeof ref !== 'object' || typeof ref.current === 'undefined') {\n      console.error('`useDraggableScroll` expects a single ref argument.');\n    }\n  }\n\n  const { direction } = options;\n\n  // The initial position (scroll progress and mouse location) when the mouse is pressed down on the element\n  let initialPosition = { scrollTop: 0, scrollLeft: 0, mouseX: 0, mouseY: 0 };\n\n  const mouseMoveHandler = (event: { clientX: number; clientY: number }) => {\n    if (ref.current) {\n      // Calculate differences to see how far the user has moved\n      const dx = event.clientX - initialPosition.mouseX;\n      const dy = event.clientY - initialPosition.mouseY;\n\n      // Scroll the element according to those differences\n      if (direction !== 'horizontal')\n        ref.current.scrollTop = initialPosition.scrollTop - dy;\n      if (direction !== 'vertical')\n        ref.current.scrollLeft = initialPosition.scrollLeft - dx;\n    }\n  };\n\n  const mouseUpHandler = () => {\n    // Return to cursor: grab after the user is no longer pressing\n    if (ref.current) ref.current.style.cursor = 'grab';\n\n    // Remove the event listeners since it is not necessary to track the mouse position anymore\n    document.removeEventListener('mousemove', mouseMoveHandler);\n    document.removeEventListener('mouseup', mouseUpHandler);\n  };\n\n  const onMouseDown = (event: { clientX: number; clientY: number }) => {\n    if (ref.current) {\n      // Save the position at the moment the user presses down\n      initialPosition = {\n        scrollLeft: ref.current.scrollLeft,\n        scrollTop: ref.current.scrollTop,\n        mouseX: event.clientX,\n        mouseY: event.clientY,\n      };\n\n      // Show a cursor: grabbing style and set user-select: none to avoid highlighting text while dragging\n      ref.current.style.cursor = 'grabbing';\n      ref.current.style.userSelect = 'none';\n\n      // Add the event listeners that will track the mouse position for the rest of the interaction\n      document.addEventListener('mousemove', mouseMoveHandler);\n      document.addEventListener('mouseup', mouseUpHandler);\n    }\n  };\n\n  return { onMouseDown };\n}\n"]},"metadata":{},"sourceType":"module"}
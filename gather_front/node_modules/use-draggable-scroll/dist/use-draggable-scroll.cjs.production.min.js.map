{"version":3,"file":"use-draggable-scroll.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import { RefObject } from 'react';\n\nexport default function useDraggableScroll(\n  ref: RefObject<HTMLElement>,\n  options: {\n    direction?: 'vertical' | 'horizontal' | 'both';\n  } = { direction: 'both' }\n) {\n  if (process.env.NODE_ENV === 'development') {\n    if (typeof ref !== 'object' || typeof ref.current === 'undefined') {\n      console.error('`useDraggableScroll` expects a single ref argument.');\n    }\n  }\n\n  const { direction } = options;\n\n  // The initial position (scroll progress and mouse location) when the mouse is pressed down on the element\n  let initialPosition = { scrollTop: 0, scrollLeft: 0, mouseX: 0, mouseY: 0 };\n\n  const mouseMoveHandler = (event: { clientX: number; clientY: number }) => {\n    if (ref.current) {\n      // Calculate differences to see how far the user has moved\n      const dx = event.clientX - initialPosition.mouseX;\n      const dy = event.clientY - initialPosition.mouseY;\n\n      // Scroll the element according to those differences\n      if (direction !== 'horizontal')\n        ref.current.scrollTop = initialPosition.scrollTop - dy;\n      if (direction !== 'vertical')\n        ref.current.scrollLeft = initialPosition.scrollLeft - dx;\n    }\n  };\n\n  const mouseUpHandler = () => {\n    // Return to cursor: grab after the user is no longer pressing\n    if (ref.current) ref.current.style.cursor = 'grab';\n\n    // Remove the event listeners since it is not necessary to track the mouse position anymore\n    document.removeEventListener('mousemove', mouseMoveHandler);\n    document.removeEventListener('mouseup', mouseUpHandler);\n  };\n\n  const onMouseDown = (event: { clientX: number; clientY: number }) => {\n    if (ref.current) {\n      // Save the position at the moment the user presses down\n      initialPosition = {\n        scrollLeft: ref.current.scrollLeft,\n        scrollTop: ref.current.scrollTop,\n        mouseX: event.clientX,\n        mouseY: event.clientY,\n      };\n\n      // Show a cursor: grabbing style and set user-select: none to avoid highlighting text while dragging\n      ref.current.style.cursor = 'grabbing';\n      ref.current.style.userSelect = 'none';\n\n      // Add the event listeners that will track the mouse position for the rest of the interaction\n      document.addEventListener('mousemove', mouseMoveHandler);\n      document.addEventListener('mouseup', mouseUpHandler);\n    }\n  };\n\n  return { onMouseDown };\n}\n"],"names":["ref","options","direction","initialPosition","scrollTop","scrollLeft","mouseX","mouseY","mouseMoveHandler","event","current","dx","clientX","clientY","mouseUpHandler","style","cursor","document","removeEventListener","onMouseDown","userSelect","addEventListener"],"mappings":"6FAGEA,EACAC,YAAAA,IAAAA,EAEI,CAAEC,UAAW,aAQTA,EAAcD,EAAdC,UAGJC,EAAkB,CAAEC,UAAW,EAAGC,WAAY,EAAGC,OAAQ,EAAGC,OAAQ,GAElEC,EAAmB,SAACC,MACpBT,EAAIU,QAAS,KAETC,EAAKF,EAAMG,QAAUT,EAAgBG,OAIzB,eAAdJ,IACFF,EAAIU,QAAQN,UAAYD,EAAgBC,WAJ/BK,EAAMI,QAAUV,EAAgBI,SAKzB,aAAdL,IACFF,EAAIU,QAAQL,WAAaF,EAAgBE,WAAaM,KAItDG,EAAiB,SAAjBA,IAEAd,EAAIU,UAASV,EAAIU,QAAQK,MAAMC,OAAS,QAG5CC,SAASC,oBAAoB,YAAaV,GAC1CS,SAASC,oBAAoB,UAAWJ,UAuBnC,CAAEK,YApBW,SAACV,GACfT,EAAIU,UAENP,EAAkB,CAChBE,WAAYL,EAAIU,QAAQL,WACxBD,UAAWJ,EAAIU,QAAQN,UACvBE,OAAQG,EAAMG,QACdL,OAAQE,EAAMI,SAIhBb,EAAIU,QAAQK,MAAMC,OAAS,WAC3BhB,EAAIU,QAAQK,MAAMK,WAAa,OAG/BH,SAASI,iBAAiB,YAAab,GACvCS,SAASI,iBAAiB,UAAWP"}